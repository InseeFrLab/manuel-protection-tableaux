{
  "hash": "ecf9315507dfadf1d3a1b4fb8120ee39",
  "result": {
    "markdown": "---\neditor: \n  markdown: \n    wrap: 72\n---\n\n\n\n\n# Fiches pratiques\n\n## Poser le secret sur un tableau\n\nPoser un masque de secret sur un tableau comprend les étapes suivantes :\n\n1.  Poser le secret primaire en créant des variables indicatrices :\n\n-   Pour chacun des tableaux on ajoute une variable booléenne indiquant\n    si la cellule est problématique (`TRUE`) ou non (`FALSE`), au\n    regarde des règles pertinentes à appliquer comme : la règle de\n    fréquence `is_secret_freq` ou la règle de dominance `is_secret_dom`\n-   Ensuite, on crée une variable résumant le secret primaire\n    `is_secret_prim` :\n    -   `is_secret_prim = is_secret_freq` si seule la règle de fréquence\n        doit s'appliquer\n    -   `is_secret_prim = is_secret_freq | is_secret_dom` si les deux\n        règles doivent s'appliquer\n\nVoici un exemple de code pour les règles classiques en statistiques\nd'entreprises :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nT0_detect <- T0 %>% \n  mutate(\n      is_secret_freq = FREQ > 0 & FREQ < 3,\n      is_secret_dom = (VALUE != 0) & (MAX > 0.85*VALUE)\n    ) %>% \n  mutate(\n    is_secret_prim = is_secret_freq | is_secret_dom\n  )\n```\n:::\n\n\n2.  Calculer le nombre de cellules détectées comme à risque\n\n3.  Poser le secret secondaire en utilisant le package `rtauargus` en\n    utilisant la fonction `tab_rtauargus()`.\n\nLa fonction `tab_rtauargus()` requiert les arguments suivants :\n\n-   `tabular`: la table à protéger\n-   `dir_name`: le nom du répertoire où les fichiers seront sauvegardés\n-   `files_name`: le nom utilisé pour nommer les fichiers (chaque\n    fichier a une extension différente);\n-   `explanatory_vars`: le nom des variables de croisements présents\n    dans la table;\n-   `secret_var`: le nom de la variable indiquant si une cellule est à\n    risque ou non (secret primaire);\n-   `value` = nom de la variable de réponse;\n-   `freq` = nom de la variable d'effectifs;\n-   `totcode`: le code utilisé pour indiquer le total pour chacune des\n    variables de croisements (`explanatory_vars`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nT0_masq <- tab_rtauargus(\n  T0_detect,\n  dir_name = \"tauargus_files/exo2\",\n  files_name = \"T0\",\n  explanatory_vars = c(\"ACTIVITY\",\"SIZE\"),\n  secret_var = \"is_secret_prim\",\n  value = \"VALUE\",\n  freq = \"FREQ\",\n  totcode = c(ACTIVITY=\"Total\",SIZE=\"Total\"),\n  verbose = FALSE\n)\n```\n:::\n\n\n4.  Calculer le nombre de cellules selon leur statut final en suivant la\n    norme européenne :\n\n-   `A` les cellules en secret primaire à cause de la règle de fréquence\n-   `B` les cellules en secret primaire à cause de la règle de dominance\n    (dans le futur ces cellules pourraient être notées `O`)\n-   `D` les cellules concernées par le secret secondaire\n-   `V` les cellules non touchées par le secret, c'est-à-dire les\n    cellules qui pourront être diffusées.\n\nPour faire le bilan du secret, le mieux est de modifier la variable\n`Status` fournie par Tau-Argus. En effet, cette variable ne permet pas\nde faire la distinction entre l'origine du secret primaire (fréquence ou\ndominance).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nT0_masq <- T0_masq %>% \n  mutate(\n    statut_final = case_when(\n      is_secret_freq ~ \"A\",\n      is_secret_dom ~ \"B\",\n      TRUE ~ Status,\n    )\n  )\n```\n:::\n\n\nAfin de bien appréhender l'impact du secret posé, on va non seulement\ncompter le nombre de cellules masquées, mais aussi calculer la valeur\ndes cellules masquées.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nT0_masq %>% \n  group_by(statut_final) %>% \n  summarise(\n    n_cell = n(),\n    val_cell = sum(VALUE)\n  ) %>%\n  mutate(\n    pc_n_cell = n_cell/sum(n_cell)*100,\n    pc_val_cell = val_cell/sum(val_cell)*100\n  )\n```\n:::\n\n\nUn bon indicateur de la qualité du secret secondaire posé consiste à\nrapporter le nombre de cellules supprimées lors de cette phase au nombre\nde cellules détectées comme à risque (secret primaire). Par exemple, si\nnous avons un ratio de $30/(46+7) = 0.57$. Alors, pour protéger une case\nen secret primaire, tau-argus a dû masquer 0.6 cellule(s). Ce qui est\ntrès peu. En effet, pour un tableau à deux dimensions, la présence d'un\nsecret primaire engendre la suppression d'au moins 3 cellules\nsupplémentaires. Ici, le ratio indique ici que nombre de cellules en\nsecret primaire se protègent entre elles.\n\n## Prendre en compte une variable hiérarchique\n\nReprenons ici l'exemple de la variable `geo` qui est une variable\nhiérarchique puisqu'il existe des emboîtements entre les différents\nniveaux.\n\n\n```{mermaid}\nflowchart LR\n  A[Pays] --> B[Nord]\n  A --> C[Ouest]\n  A --> D[Est]\n  A --> E[Sud]\n  B --> F[N1]\n  B --> G[N2]\n  B --> H[N3]\n  C --> I[O1]\n  C --> J[O2]\n  C --> K[O3]\n  C --> L[O4]\n  D --> M[E1]\n  D --> N[E2]\n  D --> O[E3]\n  E --> P[S1]\n  E --> Q[S2]\n```\n\n\nPour prendre en compte cette hiérarchie il faut d'abord pouvoir la\nreprésenter de telle sorte que Tau-Argus comprenne les différents\nemboîtements présents.\n\n### Première option\n\nLa première option consiste à créer le fichier nécessaire (extension\n`.hrc`) à la main. Ceci est tout à fait pertinent si la hiérarchie n'est\npas trop étendue.\n\nTau-Argus attend en effet un type de fichier bien particulier, dont\nl'extension est `.hrc`. Il s'agit d'un simple fichier texte où les\ndifférents emboîtements sont écrits les uns en-dessous des autres. Un\nsymbole (le `@`) est utilisé pour préciser le niveau de chacun des\nemboîtements au sein de la hiérarchie.\n\nDans notre exemple on écrirait le fichier de la façon suivante :\n\n\n::: {.cell}\n\n```{.tex .cell-code}\nNord\n@N1\n@N2\n@N3 \nOuest \n@O1 \n@O2 \n@O3 \n@O4 \nEst\n@E1 \n@E2 \n@E3 \nSud \n@S1 \n@S2\n```\n:::\n\n\nOn remarque que le total `Pays` 'est pas inclus dans le fichier `.hrc`\nc'est parce qu'il ne faut **pas indiquer le super-total de la\nhiérarchie** à Tau-Argus.\n\n### Seconde option\n\nQuand la hiérarchie est très étendue, l'écriture manuelle du fichier de\nhiérarchie est pénible. Or, quand ce genre de cas se présente, il existe\nsouvent une table de correspondance permettant d'associer les différents\nniveaux entre eux.\n\nNous appelons table de correspondance une table qui précise l'ensemble\ndes niveaux associés aux emboîtements les plus fins.\n\nLa table de correspondance représentant la hiérarchie suivante :\n\n\n::: {.cell}\n\n```{.tex .cell-code}\nNord\n@N1\n@N2\n@N3 \nOuest \n@O1 \n@O2 \n@O3 \n@O4 \nEst\n@E1 \n@E2 \n@E3 \nSud \n@S1 \n@S2\n```\n:::\n\n\nest la suivante:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npays_corr_table <- tibble(\n  niv0 = \"Pays\",\n  niv1 = c(rep(\"Nord\",3),rep(\"Ouest\",4),rep(\"Est\",3), rep(\"Sud\",2)),\n  niv2 = c(paste0(\"N\",1:3),paste0(\"O\",1:4),paste0(\"E\",1:3), paste0(\"S\",1:2))\n)\npays_corr_table\n```\n:::\n\n\nAvec la fonction `write_hrc2()` du package `rtauargus`, on peut exporter\nla table de correspondance en un fichier `hrc`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_hrc2(pays_corr_table %>% select(-niv0), file_name = \"hrc/pays_TA_2.hrc\")\n```\n:::\n\n\nRemarque: La fonction `rtauargus::write_hrc2()` qui permet de construire\nle fichier `.hrc` à partir d'une table de correspondance n'accepte pas\nde valeurs manquantes dans la table en entrée. Lorsque c'est le cas on\nrépète la modalité sur les niveaux inférieurs.\n\nExemple : avec cette hiérarchie on répète la modalité `C`\n\n\n::: {.cell}\n\n```{.tex .cell-code}\nALL\n@A\n@@A1\n@@A2\n@B\n@@B1\n@@B2\n@@@B21\n@@@B22\n@C\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncorr_tab <- tibble(\n  niv0 = \"ALL\",\n  niv1 = c(rep(\"A\",2),rep(\"B\",3), \"C\"),\n  niv2 = c(\"A1\",\"A2\",\"B1\",rep(\"B2\",2), \"C\"),\n  niv3 = c(\"A1\",\"A2\",\"B1\", \"B21\", \"B22\", \"C\")\n)\ncorr_tab\n```\n:::\n\n\n## Comment poser le secret sur plusieurs tableaux liés (par les marges) ?\n\n*Objectif* : savoir protéger un ensemble de tableaux liés en utilisant\nla fonction `tab_multi_manager()` du package `rtauargus`.\n\nPoser un masque de secret sur un ensemble de tableaux liés comprend les\nétapes suivantes :\n\n0.  Une étape préparatoire consiste à bien analyser les caractéristiques\n    des tableaux et détecter notamment la présence éventuelle de\n    variables hiérarchiques. A partir de cette analyse il est nécessaire\n    de construire deux listes :\n\n-   Une liste de tableaux\n-   Une liste renseignant les noms des variables de croisement de chacun\n    des tableaux\n\n1.  Poser le secret primaire sur chacun des tableaux indépendamment.\n\n2.  Calculer le nombre de cellules détectées comme à risque dans chacun\n    des tableaux (i.e. le nombres de variables touchées par le secret\n    primaire).\n\n3.  Poser le secret secondaire en utilisant la fonction\n    `tab_multi_manager()`\n\n4.  Faire une synthèse de la pose du secret dans chaque tableau en\n    calculant le nombre de cellules selon leur statut final. En\n    utilisant la norme européenne on note :\n\n    -   `A` les cellules en secret primaire à cause de la règle de\n        fréquence\n    -   `B` les cellules en secret primaire à cause de la règle de\n        dominance\n    -   `D` les cellules concernées par le secret secondaire\n    -   `V` les cellules non touchées par le secret, c'est-à-dire les\n        cellules qui pourront être diffusées\n\nPar exemple si l'on souhaite diffuser le nombre d'entreprises en France\nselon :\n\n-   `T0_1`: le sexe de son/sa dirigeant(e) et la région d'implantation\n-   `T0_2`: le sexe de son/sa dirigeant(e) et la caractère polluant ou\n    non de l'activité d'entreprise\n-   `T0_3`: le caractère polluant ou non de l'activité de l'entreprise\n    et la région d'implantation\n\nNombre d'entreprises par région et par sexe du dirigeant (`T0_1`)\n\n|           | Femme  | Homme  | **Total** |\n|:---------:|:------:|:------:|:---------:|\n|   Nord    |   16   |   20   |  **36**   |\n|    Sud    |   19   |   12   |  **31**   |\n| **Total** | **35** | **32** |  **67**   |\n\nNombre d'entreprises polluantes par sexe du dirigeant (`T0_2`)\n\n|           | Polluante | Non polluante | **Total** |\n|:---------:|:---------:|:-------------:|:---------:|\n|   Femme   |     8     |      27       |  **35**   |\n|   Homme   |    22     |      17       |  **32**   |\n| **Total** |  **30**   |    **37**     |  **67**   |\n\nNombre d'entreprises polluantes par région (`T0_3`)\n\n|           | Polluante | Non polluante | **Total** |\n|:---------:|:---------:|:-------------:|:---------:|\n|   Nord    |    10     |      26       |  **36**   |\n|    Sud    |    20     |      11       |  **31**   |\n| **Total** |  **30**   |    **37**     |  **67**   |\n\nCes trois tableaux sont liés puisqu'ils partagent des marges communes :\n\n-   `T0_1` et `T0_2` ont les mêmes marges sur la variable `SEXE`\n-   `T0_1` et `T0_3` ont les mêmes marges sur la variable `REGION`\n-   `T0_2` et `T0_3` ont les mêmes marges sur la variable `POLL`\n\nSuivons à présent les étapes présentées précédemment.\n\n0.  Analyse des caractéristiques des tableaux (étape préparatoire)\n\n    -   Vérifier les hiérarchies et les totaux Il est important de\n        détecter la présence éventuelle de variables hiérarchiques dans\n        un ou plusieurs tableaux. Dans ce cas-ci il n'y a pas de\n        variables hiérarchiques. Il est aussi intéressant de repérer les\n        codes servant au total et de s'assurer que ces codes sont\n        cohérents pour une même variable apparaissant dans plusieurs\n        tableaux. En effet, deux tableaux partageant la même variable\n        doivent utiliser la même modalité pour renseigner la total. On\n        le vérifie en regardant les données.\n\n    -   Construire une liste de tableaux et une liste de variables de\n        croisements. Pour ce faire on peut créer les listes\n        \"manuellement\" :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nliste_tabs_exemple <- list(\n  sex_reg = T0_1,\n  sex_pol = T0_2, \n  pol_reg = T0_3\n)\n\nliste_vars_exemple <- list(\n  sex_reg = c(\"SEXE\",\"REGION\"),\n  sex_pol = c(\"SEXE\",\"POLL\"),\n  pol_reg = c(\"POLL\",\"REGION\")\n)\n```\n:::\n\n\nOu bien cette étape peut être automatisée en fonction du contexte :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nliste_vars_exemple <- purrr::map(\n  liste_tabs_exemple,\n  function(tab) names(tab)[1:2]\n)\n```\n:::\n\n\n1.  Poser le secret primaire sur chacun des tableaux\n\n2.  Poser le secret secondaire avec `tab_multi_manager()`\n\nLa fonction `tab_multi_manager()` requiert les arguments suivants :\n\n-   **list_tables** : liste de tables à protéger\n\n-   **list_explanatory_vars** : liste des noms des variables de\n    croisements présentes dans la liste des tables à protéger dans la\n    table;\n\n-   **dir_name** : le nom du répertoire qui contiendra tous les fichiers\n    créés, s'il n'existe pas, il sera créé (ex :\n    `dir_name = \"my_directory\"`).\n\n-   **hrc** : un vecteur nommé spécifiant le chemin vers le fichier\n    `.hrc` pour chaque variable hiérarchique (ex :\n    `c(ACTIVITY = “chemin_vers_fichier/act.hrc”, NUTS = “chemin_vers_fichier/nuts.hrc” )`).\n\n-   **alt_hrc** : une liste nommée utile pour traiter les hiérarchies\n    non emboîtées. Les noms de la liste sont les noms des tableaux pour\n    lesquelles une autre hiérarchie (non emboîtée en général) doit être\n    utilisée (ex : si T1 et T2 ont une variable explicative, appelée\n    `ACTIVITY`, et la même variable de réponse, mais la variable\n    `ACTIVITY` n'a pas la même hiérarchie dans les les deux tables).\n    Supposons que les hiérarchies (`act1.hrc` et `act2.hrc`) ne sont pas\n    emboîtées. Dans ce cas, nous écrivons les deux arguments comme suit\n    :\n\n    -   `hrc = c(ACTIVITY = \"path_to_file/act_1.hrc\")` : par défaut,\n        cette hiérarchie sera utilisée pour la variable ACTIVITY.\n\n    -   `alt_hrc = list(T2 = c(ACTIVITY = \"chemin_vers_fichier/act_2.hrc\"))`\n        dans la table T2, la hiérarchie alternative sera utilisée.\n\n-   **totcode** : le code du total pour chaque variable explicative. Il\n    est recommandé d'utiliser le même code de total pour chaque\n    variable. Si par exemple le code est \"Total\" pour toutes les\n    variables. La syntaxe suivante est autorisée : `totcode = “Total”`.\n    Sinon, l'input attendu est une liste spécifiant le code total pour\n    chaque variable explicative (ex :\n    `totcode = list(ACTIVITY = “Total”, NUTS = “FR”, SIZE = “Ensemble”, CJ = “Total”)`)\n\n*Attention* : Si les totaux ne sont pas dans la table, ils seront\ncalculés par Tau-Argus, mais ils ne seront pas éligibles pour la\nsuppression primaire. Il est donc nécessaire de les fournir dans la\ntable de départ.\n\n-   **alt_totcode** : une liste nommée pour les codes de totaux\n    alternatifs (voir `alt_hrc` pour l'utilisation).\n\n-   **value** : le nom de colonne de la variable de réponse dans les\n    tableaux, il DOIT être identique pour chaque table (ex :\n    `valeur = “turnover”`). Valeur par défaut : `“value”`.\n\n-   **freq** : le nom de colonne de la variable de fréquence dans les\n    tableaux, il DOIT être le même nom pour chaque tableau (ex :\n    `freq = “frequency”`). Valeur par défaut : `“freq”`.\n\n-   **secret_var** : le nom de la variable booléenne spécifiant le\n    secret primaire dans les tables, il DOIT être le même nom pour\n    chaque table (ex : `secret_var = “is_secret_prim”`). Valeur par\n    défaut : `“is_secret_prim”`.\n\n-   **cost_var** : variable numeric qui permet de changer le coût de\n    suppression d'une cellule, pris en compte dans les algorithmes de\n    secret secondaire. Par défaut le coût correspond à la valeur de la\n    cellule. Peut être spécifié pour chacune des cellules. Peut contenir\n    des NA pour les coûts que l'on ne souhaite pas modifier.\n\n-   **suppress** : algorithme de gestion du secret secondaire (syntaxe\n    batch de Tau-Argus), ainsi que les potentiels paramètres associés.\n    Valeur par défaut : `MOD(1,5,1,0,0)`\n\n-   **ip_start** : les intervalles de protection pour la première\n    itération sur une table donnée (nombre entier). La valeur par défaut\n    est 10.\n\n-   **ip_end** : les intervalles de protection pour la deuxième\n    itération sur une table (nombre entier). Valeur par défaut : 0.\n\n-   **num_iter_max** : nombre d'itérations maximum sur un tableau, ce\n    paramètre est ici pour assurer le fait que la fonction va s'arrêter.\n    En pratique on n'atteint jamais la limite de 10. La valeur par\n    défaut est 10.\n\n3.  Analyser les résultats\n\n**Analyser le journal**\n\nLa fonction `tab_multi_manager()` fournit un journal décrivant\nl'ensemble des itérations réalisées lors du processus de protection. Il\ns'agit du fichier `journal.txt` dans le répertoire mentionné dans\n`dir_name`.\n\nPour chaque étape, sont indiqués :\n\n-   Le tableau sur lequel est posé sur le secret secondaire ;\n-   Le bilan du secret posé sur ce tableau ;\n-   Le nombre de cellules communes (c'est-à-dire appartenant à plusieurs\n    tableaux) touchées.\n\nL'ensemble des cellules communes est listé en fin de processus.\n\n**Bilan du secret**\n\nL'objet retourné par la fonction `tab_multi_manager()` est une liste\ncontenant les mêmes tables que la liste placée en input auxquelles sont\najoutés les résultats des différentes étapes de la pose du secret\nsecondaire. Ainsi, la dernière variable de chaque tableau permet de\ndéterminer le statut final de chaque cellule.\n\nCe code crée une variable `statut_final` renvoyant les codes de la norme\neuropéenne :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexemple_masq <- exemple_masq %>% \n  purrr::map(\n    function(tab){\n      tab %>% \n        rename_with(~\"is_secret_final\", last_col()) %>% \n        mutate(\n          statut_final = case_when(\n            is_secret_freq ~ \"A\",\n            is_secret_final ~\"D\",\n            TRUE ~ \"V\"\n          )\n        )\n    }\n  )\n```\n:::\n\n\nOn peut ainsi dresser notre bilan par tableau :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexemple_masq %>% \n  purrr::imap_dfr(\n    function(tab, nom){\n      tab %>% \n        count(statut_final) %>% \n        mutate(\n          part = n/sum(n)*100,\n          table = nom\n        ) %>% \n        relocate(table)\n    }\n  )\n```\n:::\n\n\n## Comment poser le secret en présence de hiérarchies non-emboîtées ?\n\nLorsque l'on a la présence de hiérarchie non-emboîtée dans les tableaux\ntraités alors il faut construire deux tableaux et deux hiérarchies pour\nchaque hiérarchie non-emboîtée.\n\nPar exemple, si on a un tableau T croisant NAF et GEO (deux variables\nhiérarchiques). Dans le cas où pour la NAF, en plus des activités\nclassiques, il est décidé de publier un agrégat supplémentaire AGREG =\nB12 + C15 + G45. Ainsi, AGREG ne peut pas s'insérer dans la NAF. Il faut\ndonc sortir cet agrégat pour construire un second tableau.\n\n-   T1, T2 croisent NAF et GEO\n-   T1 avec NAF classique (dont B12, C15, G45)\n-   T2 avec AGREG et ses composants B12, C15, G45\n\nRappel des arguments de `tab_multi_manager()` utiles pour traiter les\nhiérarchies non-emboîtées :\n\n-   **alt_totcode** : une liste nommée pour les codes de totaux\n    alternatifs (voir `alt_hrc` pour l'utilisation).\n\n-   **alt_hrc** : une liste nommée utile pour traiter les hiérarchies\n    non emboîtées. Les noms de la liste sont les noms des tableaux pour\n    lesquelles une autre hiérarchie (non emboîtée en général) doit être\n    utilisée (ex : si T1 et T2 ont une variable explicative, appelée\n    `ACTIVITY`, et la même variable de réponse, mais la variable\n    `ACTIVITY` n'a pas la même hiérarchie dans les les deux tables).\n    Supposons que les hiérarchies (`act1.hrc` et `act2.hrc`) ne sont pas\n    emboîtées. Dans ce cas, nous écrivons les deux arguments comme suit\n    :\n\n    -   `hrc = c(ACTIVITY = \"path_to_file/act_1.hrc\")` : par défaut,\n        cette hiérarchie sera utilisée pour la variable ACTIVITY.\n\n    -   `alt_hrc = list(T2 = c(ACTIVITY = \"chemin_vers_fichier/act_2.hrc\"))`\n        dans la table T2, la hiérarchie alternative sera utilisée.\n\n## Comment utiliser les coûts ?\n\n*Objectif* : apprendre à utiliser l'option `cost` du package `rtauargus`\nafin de rediriger le secret secondaire.\n\nTau-Argus utilise des algorithmes d'optimisation afin de minimiser la\nperte d'information qui résulte du secret secondaire. La question qui se\npose est quelle valeur doit-être minimiser ? Plusieurs choix sont\npossibles, la valeur des cellules, le nombre de cellules, les effectifs\ndes cellules. Il est également possible de personnaliser les coûts si\nl'on souhaite prioriser la pose de secret secondaire sur certains\nagrégats.\n\n### Minimiser la valeur secrétisée\n\nTau-Argus minimise par défaut la valeur des cellules supprimées. C'est\nce qui est le plus cohérent, lorsque l'on publie un tableau c'est bien\nla valeur des cellules qui nous intéresse.\n\n### Minimiser le nombre de cellules secrétisées\n\nPour minimiser le nombre de cellules secrétisées il faut utiliser le\nparamètre `cost` et donc le définir dans notre table. si l'on souhaite\nminimiser le nombre de cellules masquées, il faut alors que le coût de\nsuppression de chaque cellule soit identique, Tau-Argus considère alors\nqu'elles ont toutes la même importance. Pour cela il faut créer une\ncolonne \"cost\" qui vaut 1 pour toutes les cellules de notre tableau.\n\n### Minimiser les effectifs secrétisés\n\nOn peut aussi considérer que la valeur importante des cellules sont\nleurs effectifs. On peut penser qu'un nombre de répondants élevé pour\nune cellule lui confère une plus grande fiabilité statistique. Pour cela\nil suffit simplement de recopier la colonne \"freq\" dans notre colonne\n\"cost\".\n\n### Orienter le secret secondaire\n\nDans certaines données on peut trouver des agrégats jugés non\nsignificatifs. Ces derniers ne seront pas publiés dans les tableaux mais\nnotés \"ns\". On peut alors s'en servir pour la pose du secret secondaire.\n\nAttention, on pourrait penser que ces cellules devraient être placées en\nsecret primaire, afin qu'elles soient considérées comme masquées quoi\nqu'il arrive. Cependant, cela peut entraîner plus de secret secondaire\nque nécessaire sachant qu'il n'est pas nécessaire de protéger ces\ncellules du risque de recoupement. L'utilisateur peut retrouver la\nvaleur de ces cellules, mais il est averti qu'elles n'ont aucune\nimportance statistique.\n\nPour prioriser le secret secondaire on crée donc pour les agrégats\nnon-significatifs la colonne \"cost\" qui vaut 1. C'est le coût minimal,\nceci indiquera à Tau-Argus que ces agrégats sont donc prioritaires pour\nle secret secondaire. Ainsi, certains coûts ne seront pas définis. Ce\nn'est pas un problème, lorsque l'on ne spécifie pas de coût pour une\ncellule, Tau-Argus va considérer que son coût de suppression est égal à\nla valeur de cette dernière.\n\n## Différenciation avec diff man\n\nNiveau expert pour traiter non emboîtement epci x communes, mais on\npourrait envisager hiérarchies non emboîtées si intégration de la\ngestion de la différenciation directement dans `rtauargus`\n",
    "supporting": [
      "06_fiches_pratiques_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}